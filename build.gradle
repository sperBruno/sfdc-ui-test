import de.undercouch.gradle.tasks.download.Download

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Jimmy Vargas' at '6/12/15 6:15 PM' with Gradle 2.4
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.4/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        jcenter()
        maven {
            url "http://repo.bodar.com"
        }
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'

//handling the download drivers
apply plugin: 'de.undercouch.download'
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:2.46.0'
    compile 'com.force.api:force-wsc:35.0.0'
    compile 'com.force.api:force-partner-api:35.0.0'
    compile 'org.testng:testng:6.8.8'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'com.fasterxml.jackson.core:jackson-core:2.5.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.4'
    compile 'com.github.detro:phantomjsdriver:1.2.0'
    compile("org.uncommons:reportng:1.1.4")
            { exclude group: "org.testng", module: "testng" }
    compile 'com.google.inject:guice:3.0'
    compile 'log4j:log4j:1.2.17'
}

task runTestNGTestCases(type: Test) {
    useTestNG()
    testLogging {
        events "started", "passed", "failed", "skipped"
    }

    options {
        suites(suites)
        includeGroups(groups)
        excludeGroups(excludeGroup)
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }

    systemProperties.put('primaryUserName', primaryUserName)
    systemProperties.put('primaryUserPassword', primaryUserPassword)
    systemProperties.put('primaryUsePasswordToken', primaryUsePasswordToken)
    systemProperties.put('browser', browser)

    systemProperties.put('groups', groups)
    systemProperties.put('excludeGroup', excludeGroup)

    systemProperties.put('remoteUserName', remoteUserName)
    systemProperties.put('remoteKey', remoteKey)
    systemProperties.put('remoteBrowser', remoteBrowser)
    systemProperties.put('remotePlatform', remoteBrowser)
    systemProperties.put('remoteBrowserVersion', remoteBrowser)

    systemProperties.put('http.proxyHost', proxyHost)
    systemProperties.put('http.proxyPort', proxyPort)

    File drivers = new File('./drivers')
    drivers.mkdirs()

    task downloadChromeDriver(type: Download) {
        src([
                'http://chromedriver.storage.googleapis.com/2.15/chromedriver_win32.zip'
        ])
        dest drivers
        overwrite true
    }

    task downloadIEDriver(type: Download) {
        src([
                'http://selenium.googlecode.com/files/IEDriverServer_x64_2.28.0.zip'
        ])
        dest drivers
        overwrite true
    }

    task downloadDrivers(type: Copy) {

        if (browser == "Chrome") {
            downloadChromeDriver.execute()

        } else if (browser == "IE") {

            downloadIEDriver.execute()
        }

        file(drivers).listFiles().each {
            artifact ->
                if (artifact.name.endsWith('.zip')) {
                    from zipTree(artifact)
                    into drivers
                }
        }
    }

    if (browser != "Firefox") {
        downloadDrivers.execute()
    }

}